To draw something, one needs to:
1.  Create a VAO (Vertex Array Object), VBO (Vertex Buffer Object) and IBO (Index Buffer Object).
2.  Add VBO to VAO.
3.  Create and enable shader.
4.  Create projection matrix (Orthographic or Projective)
5.  Set property "pr_matrix" to the projection matrix.
6.  Clear window.
7.  Bind VAO and IBO
8.  Call glDrawElements.
9.  Unbind IBO AND VAO.
10. Update window

Code:

		GLfloat vertices[] =
		{
			4.0f,  4.5f / 2.0f, 0,		// Bottom right
			4.0f, -4.5f / 2.0f, 0,		// Top right
			-4.0f, -4.5f / 2.0f, 0,		// Top left
			-4.0f,  4.5f / 2.0f, 0		// Bottom left
		};

		GLushort indices[]
		{
			0, 1, 2, 0, 2, 3
		};

		VertexArray vao;
		Buffer* vbo = new Buffer(vertices, 4 * 3, 3);
		IndexBuffer ibo(indices, 6);

		vao.addBuffer(vbo, 0);

		mat4 ortho = mat4::orthographic(-8.0f, 8.0f, 4.5f, -4.5f, -1.0f, 1.0f);

		Shader shader("graphics/shaders/basic.vert", "graphics/shaders/basic.frag");
		shader.enable();
		shader.setUniformMat4("pr_matrix", ortho);
		//shader.setUniformMat4("ml_matrix", mat4::translation(vec3(-4.0f, -4.5/2.0f, 0.0f)));
		shader.setUniform4f("in_Color", vec4(1.0f, 0.0f, 1.0f, 1.0f));

		vec2 lightPos(-8.0f, 0.0f);
		vec2 lightSpeed(0.2f, 0.2f);
		while (!renderer.windowClosed()) {
			//renderer.render();
			renderer.clear();
			//glDrawArrays(GL_TRIANGLES, 0, 6);
			vao.bind();
			ibo.bind();

			if (lightPos.x > 8.0f || lightPos.x < -8.0f) {
				lightSpeed.x *= -1.0f;
			}

			if (lightPos.y > 4.5f/2.0f || lightPos.y < -4.5f / 2.0f) {
				lightSpeed.y *= -1.0f;
			}

			lightPos.x += lightSpeed.x;
			lightPos.y += lightSpeed.y;


			shader.setUniform2f("light_position", lightPos);
			shader.setUniformMat4("ml_matrix", mat4::translation(vec3(-4.0f, 0.0f, 0.0f)));
			glDrawElements(GL_TRIANGLES, ibo.getCount(), GL_UNSIGNED_SHORT, 0);
			shader.setUniformMat4("ml_matrix", mat4::translation(vec3(4.0f, 0.0f, 0.0f)));
			glDrawElements(GL_TRIANGLES, ibo.getCount(), GL_UNSIGNED_SHORT, 0);
			ibo.unbind();
			vao.unbind();
			renderer.update();
		}